// Place your key bindings in this file to override the defaults
[
  // Page Down - workround to make cursor movement match Nvim
  {
    "key": "pagedown",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageDown",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortTop", "by": "line" }
        },
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },

  // Page Up - workround to make cursor movement match Nvim
  {
    "key": "pageup",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollPageUp",
        {
          "command": "cursorMove",
          "args": { "to": "viewPortBottom", "by": "line" }
        },
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },
  // Build
  {
    "key": "shift+f2",
    "command": "workbench.action.debug.start",
    "when": "taskCommandsRegistered"
  },
  // Fuzzy find class / file by name
  {
    "key": "shift+f3",
    "command": "workbench.action.quickOpen"
  },
  // Scroll up 16 Lines
  {
    "key": "shift+f4",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp",
        "scrollLineUp",
        "cursorUp"
      ]
    }
  },

  // Scroll down 16 Lines
  {
    "key": "shift+f6",
    "command": "runCommands",
    "when": "textInputFocus",
    "args": {
      "commands": [
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown",
        "scrollLineDown",
        "cursorDown"
      ]
    }
  },
  // Stop Build / Stop Debugging
  {
    "key": "shift+f7",
    "command": "workbench.action.debug.stop"
  },
  // Goto Definition
  {
    "key": "shift+f8",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  // Toggle Comment
  {
    "key": "shift+f11",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus"
  },
  // Fuzzy find with files (rg)
  {
    "key": "shift+cmd+f",
    "command": "runCommands",
    "args": {
      "commands": [
        "editor.action.smartSelect.expand",
        "find-it-faster.findWithinFiles"
      ]
    }
  },
  // Terminal
  {
    "key": "ctrl+/",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  // File explorer
  {
    "command": "workbench.action.toggleSidebarVisibility",
    "key": "escape",
    "when": "explorerViewletVisible && !inputFocus"
  },
  {
    "command": "workbench.action.toggleSidebarVisibility",
    "key": "e",
    "when": "explorerViewletVisible && !inputFocus"
  },
  {
    "key": "o",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "renameFile",
    "key": "c",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+O",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  // {
  //     "key": "shift+n",
  //     "command": "workbench.action.newWindow",
  //     "when": "!explorerViewletFocus"
  // },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Diff
  {
    // Goto next change
    "key": "alt+l",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },
  {
    // Goto previous change
    "key": "alt+h",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible && editorTextFocus"
  },

  {
    // Revert the selected hunk
    "key": "alt+k",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor && !isInDiffLeftEditor && editorTextFocus"
  },
  {
    // Stage the selected hunk
    "key": "ctrl+j",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor && !isInDiffLeftEditor && editorTextFocus"
  },
  {
    // Unstage the selected hunk - this is not working for some reason but maybe would in some context
    "key": "ctrl+alt+j",
    "command": "git.unstageSelectedRanges",
    "when": "isInDiffEditor && !isInDiffLeftEditor && editorTextFocus"
  },

  {
    // Fallback revert
    "key": "alt+shift+k",
    "command": "diffEditor.revert",
    "when": "isInDiffEditor && editorTextFocus"
  },

  {
    // Pop up an in place 'peek' of the next diff in any file you are editing
    "key": "alt+l",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !isInDiffEditor"
  },
  {
    // Pop up an in place 'peek' of the previous diff in any file you are editing
    "key": "alt+h",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus && !isInDiffEditor"
  },
  // Merging
  {
    "key": "alt+k",
    "command": "merge-conflict.accept.current",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "merge-conflict.accept.all-current",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "alt+j",
    "command": "merge-conflict.accept.incoming",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+j",
    "command": "merge-conflict.accept.all-incoming",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "alt+h",
    "command": "merge.goToNextUnhandledConflict",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "merge-conflict.next",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "ctrl+alt+l",
    "command": "merge-conflict.previous",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  {
    "key": "alt+l",
    "command": "merge.goToPreviousUnhandledConflict",
    "when": "(isMergeEditor || mergeConflictsCount > 0) && editorTextFocus"
  },
  // Debug Navigation
  {
    "key": "alt+h",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.debug.stepOut",
    "when": "inDebugMode && debugState == 'stopped' && editorTextFocus"
  },
  // Terminal
  {
    // There is an issue with the find it faster plugin where it does not focus your last editor when you press escape, so this fixes that
    "key": "escape",
    "command": "runCommands",
    // This only activates when the 'editor as a tab' mode is active. Would be better to use a context set by the find it faster plugin
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        {
          "command": "workbench.action.terminal.sendSequence",
          // Escape keycode
          "args": { "text": "\u001b" }
        },
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.navigateBack",
        "extension.vim_escape"
      ]
    }
  },
  {
    // There is an issue in the find it faster plugin where it does not clear your last selection when you do a search, so this fixes that
    "key": "enter",
    "command": "runCommands",
    // This only activates when the 'editor as a tab' mode is active. Would be better to use a context set by the find it faster plugin
    "when": "terminalFocus && terminalEditorActive",
    "args": {
      "commands": [
        {
          "command": "workbench.action.terminal.sendSequence",
          // Enter keycode
          "args": { "text": "\u000D" }
        },
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.navigateBack",
        "extension.vim_escape"
      ]
    }
  }
]
