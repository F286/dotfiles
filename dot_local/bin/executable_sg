#!/usr/bin/env bash
set -euo pipefail

# Optional: highlight the live query text in the preview (1=on, 0=off)
HIGHLIGHT_QUERY="${HIGHLIGHT_QUERY:-1}"

# Optional initial query from args
# shellcheck disable=SC2034
QUERY="${*:-}"

# Toggle states (Alt-keys modify these)
FIXED=0        # Alt-r: regex(0) <-> fixed strings(1)
WORD=0         # Alt-w: word boundary match
SHOW_HIDDEN=1  # Alt-.: include hidden files
NO_IGNORE=0    # Alt-i: include ignored files (no-ignore)
CASE_MODE=smart  # Alt-c: cycle smart -> sensitive -> ignore

# Hard requirements
for cmd in rg fzf; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "$cmd not found on PATH." >&2
    exit 0
  fi
done

# Determine search root - prefer git root, else project markers, else CWD
if ROOT="$(git -C "$PWD" rev-parse --show-toplevel 2>/dev/null)"; then
  :
else
  find_project_root() {
    local d="$PWD"
    local markers=(
      package.json pnpm-workspace.yaml yarn.lock package-lock.json
      go.mod Cargo.toml pyproject.toml requirements.txt
      composer.json Makefile CMakeLists.txt
    )
    while [ "$d" != "/" ]; do
      for m in "${markers[@]}"; do
        [ -e "$d/$m" ] && printf '%s' "$d" && return 0
      done
      d="$(dirname "$d")"
    done
    return 1
  }
  ROOT="${PWD}"
  if r="$(find_project_root)"; then ROOT="$r"; fi
fi
cd "$ROOT"

# Build the ripgrep command from current toggles
build_rg() {
  RG=(rg --line-number --column --no-heading --follow --max-columns=4096 --color=always)
  # hidden + ignore toggles
  [ "$SHOW_HIDDEN" -eq 1 ] && RG+=(--hidden)
  RG+=(--glob '!.git')
  [ "$NO_IGNORE" -eq 1 ] && RG+=(-uu)
  # regex vs fixed
  [ "$FIXED" -eq 1 ] && RG+=(-F)
  # word match
  [ "$WORD" -eq 1 ] && RG+=(-w)
  # case mode
  case "$CASE_MODE" in
    smart) RG+=(--smart-case);;
    sensitive) RG+=(--case-sensitive);;
    ignore) RG+=(--ignore-case);;
  esac
}

# Preview command
# - centers around the hit with context
# - highlights the matched line (and optionally the query text)
# - prefers bat, falls back to sed + nl
# IMPORTANT: leave {1},{2},{q} unquoted; fzf provides safe quoting.
# shellcheck disable=SC2016
PREVIEW_CMD='
  [ -z {1} ] && exit 0
  L={2}; [ -z "$L" ] && L=1
  S=$((L>15 ? L-15 : 1))
  E=$((L+40))

  _want_q_hl='"${HIGHLIGHT_QUERY}"'

  if command -v bat >/dev/null 2>&1; then
    if [ -n {q} ] && [ "$_want_q_hl" = "1" ]; then
      bat --paging=never --style=numbers --color=always \
          --highlight-line "$L" --line-range ${S}:${E} -- {1} \
        | rg --passthru --color=always -e {q} || true
    else
      bat --paging=never --style=numbers --color=always \
          --highlight-line "$L" --line-range ${S}:${E} -- {1}
    fi
  elif command -v batcat >/dev/null 2>&1; then
    if [ -n {q} ] && [ "$_want_q_hl" = "1" ]; then
      batcat --paging=never --style=numbers --color=always \
             --highlight-line "$L" --line-range ${S}:${E} -- {1} \
        | rg --passthru --color=always -e {q} || true
    else
      batcat --paging=never --style=numbers --color=always \
             --highlight-line "$L" --line-range ${S}:${E} -- {1}
    fi
  else
    # Portable fallback: use input redirection instead of "sed --"
    if [ -n {q} ] && [ "$_want_q_hl" = "1" ]; then
      sed -n "${S},${E}p" < {1} | nl -ba -w1 -s"  " \
        | awk -v l="$L" '"'"'{ if (NR==l) printf "\033[7m%s\033[0m\n", $0; else print }'"'"' \
        | rg --passthru --color=always -e {q} || true
    else
      sed -n "${S},${E}p" < {1} | nl -ba -w1 -s"  " \
        | awk -v l="$L" '"'"'{ if (NR==l) printf "\033[7m%s\033[0m\n", $0; else print }'"'"'
    fi
  fi
'

HIST_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/fzf-history"
mkdir -p "$HIST_DIR"
HIST_FILE="$HIST_DIR/sg"

# Run fzf in a loop to handle toggle keys, preserving query
while true; do
  build_rg
  # fzf reload snippet - only search when query is non-empty
  # IMPORTANT: leave {q} unquoted; fzf provides safe quoting.
  # shellcheck disable=SC2034
  RELOAD_CMD='
    if [ -n {q} ]; then
      '"${RG[*]}"' -- {q}
    else
      printf ""
    fi
  '

  # shellcheck disable=SC2054
  FZF_ARGS=(
    --ansi
    --multi
    --phony # do not filter locally, we reload from rg
    --bind "start:reload:${RELOAD_CMD}"
    --bind "change:reload:${RELOAD_CMD}"
    --prompt='> '
    --height=100%
    --margin=1,2           # float-like feel
    --header=''            # no text at top
    --border --layout=reverse
    --info=inline # shows 1/65 on the right
    --delimiter=':'
    --preview="${PREVIEW_CMD}"
    --preview-window='right,60%,border,wrap'
    --bind 'alt-p:toggle-preview'
    --bind 'ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up'
    --bind 'alt-a:toggle-all'
    # IMPORTANT: leave placeholders unquoted here as well
    --bind 'enter:execute-silent(code -r --goto {1}:{2}:{3})+abort'
    --bind 'ctrl-q:execute-silent(code -r --goto {+1}:{+2}:{+3})+abort'
    --color='border:#3b4261'
    --color='spinner:#bb9af7,header:#565f89,pointer:#ff9e64,marker:#9ece6a'
    --border-label "Grep - $(basename "$ROOT")"
    --history="$HIST_FILE"
    --print-query
  )

  out=$(FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS-}" fzf \
    --expect=alt-r,alt-w,alt-.,alt-i,alt-c \
    "${FZF_ARGS[@]}" \
    --query "$QUERY" || true)

  key=$(printf '%s\n' "$out" | head -n1)
  QUERY=$(printf '%s\n' "$out" | sed -n '2p')
  case "$key" in
    alt-r) FIXED=$((1-FIXED));;  # regex<->fixed strings
    alt-w) WORD=$((1-WORD));;
    alt-.) SHOW_HIDDEN=$((1-SHOW_HIDDEN));;
    alt-i) NO_IGNORE=$((1-NO_IGNORE));;
    alt-c)
      case "$CASE_MODE" in
        smart) CASE_MODE=sensitive;;
        sensitive) CASE_MODE=ignore;;
        *) CASE_MODE=smart;;
      esac
      ;;
    *) break;;
  esac
done

exit 0
